generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  googleId  String?  @unique
  avatar    String?
  firstName String
  lastName  String
  role      Role     @default(STUDENT)
  clubId    String?
  club      Club?    @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventRegistrations EventRegistration[]
  blogs              Blog[]

  @@map("users")
}

enum Role {
  STUDENT
  CLUB_HEAD
  ADMIN
}

model Club {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  imageUrl    String?
  clubHeadId  String? @unique

  members User[]
  events  Event[]
  mentors Mentor[]

  @@map("clubs")
}

model Event {
  id            String              @id @default(cuid())
  title         String
  description   String
  imageUrl      String?
  date          DateTime
  clubId        String
  club          Club                @relation(fields: [clubId], references: [id])
  createdAt     DateTime            @default(now())
  registrations EventRegistration[]

  @@map("events")
}

model EventRegistration {
  id           String   @id @default(cuid())
  userId       String
  eventId      String
  registeredAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@map("event_registrations")
}

model Mentor {
  id          String @id @default(cuid())
  name        String
  expertise   String
  imageUrl    String
  linkedInUrl String @default("")
  clubId      String
  club        Club   @relation(fields: [clubId], references: [id])

  @@map("mentors")
}

model Blog {
  id        String     @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  status    BlogStatus @default(DRAFT)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("blogs")
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  imageUrl  String?
  batchYear Int
  content   String
  createdAt DateTime @default(now())

  @@map("testimonials")
}
